#!/bin/bash

#####################################
# This script sets up your machine
# Permission set to user readable & executable
# by: chmod 775 ./setup_linux
# run by right-clicking it
#####################################


#####################################
# Preparing to run
#####################################
echo "
================================================

Welcome to the Linux Setup
by Wah Loon Keng @ Jan 6 2016
for bug reports, contact [ kengzwl@gmail.com ]

This will take under 30 minutes.

================================================
"
# Ask for the administrator password upfront
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"
# sudo -v
# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &



#####################################
# Homebrew-install all shits
#####################################
echo "
================================================

Setup ~/.bashrc

================================================
"
# setup bash profile first before being overridden
echo "
# git
alias gstat='git status'
alias gadd='git add -A; git commit -m'
alias gpush='git push'
alias gpull='git pull'
 
# activate tensorflow
alias activatetf='source ~/tensorflow/bin/activate'

# lazy-check your ip
alias myip='curl ipinfo.io'

# lazy login to NUC
alias nuc='ssh -X deploy@212.47.252.178 -p 377'
" > ~/.bashrc


# Update first before install
sudo apt-get update 


#####################################
# Set up Homebrew
#####################################
echo "
=> Ensuring you have brew"
brew --version || (ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)";

# export brew path
echo '
export PATH="$HOME/.linuxbrew/bin:$PATH"
export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"' >> ~/.bashrc;
)


# Add keys
# Google-chrome
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 
sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
# ST3
sudo add-apt-repository ppa:webupd8team/sublime-text-3



#####################################
# Install common apps
#####################################
sudo apt-get install git
sudo apt-get install google-chrome-stable
sudo apt-get install sublime-text-installer


# install java
echo "
=> Ensuring you have JDK 1.7 to run neo4j"
sudo apt-get update
java -version || sudo apt-get install default-jdk

# write JAVA_HOME path if not exists
if [ "$JAVA_HOME" == "" ]; 
	then jdkpath=$(readlink -f $(which java) | sed 's/\(.*\)\/bin\/java/\1/'); echo "
# For neo4j to use JVM
export JAVA_HOME=$jdkpath" >> ~/.bashrc;
fi



# install neo4j for brain
echo "
=> Ensuring you have neo4j"
ninfo=$(brew info neo4j)
nv="$(echo $ninfo | sed 's/\(.*\)\, dev.*/\1/')"
if [ "$nv" ]; then echo $nv; else (
	sudo wget -O - https://debian.neo4j.org/neotechnology.gpg.key | sudo apt-key add -;
	echo 'deb http://debian.neo4j.org/repo stable/' >/tmp/neo4j.list;
	sudo mv /tmp/neo4j.list /etc/apt/sources.list.d;
	sudo apt-get update;
	sudo apt-get install neo4j;
	echo "
# neo4j {start | stop | status | info}
alias neo4j='service neo4j-service'" >> ~/.bashrc
	); fi



#####################################
# Install Python and pip apps
#####################################
sudo apt-get install python-pip python-dev build-essential
sudo pip install --upgrade pip
sudo pip install --upgrade setuptools
sudo pip install --upgrade virtualenv
# tensorflow
sudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.6.0-cp27-none-linux_x86_64.whl



#####################################
# Install Node.js and npm apps
#####################################
sudo apt-get install nodejs
sudo apt-get install npm
sudo ln -s /usr/bin/nodejs /usr/bin/node
sudo npm update npm -g
# gulp for streaming build, forever for keep-alive
sudo npm i -g gulp forever



#####################################
# Install Ruby on Rails with RVM
#####################################
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev

# install rbenv ruby-build
cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc
exec $SHELL

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
exec $SHELL

git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash


rbenv install $(rbenv install -l | grep -v - | tail -1)
rbenv global $(rbenv install -l | grep -v - | tail -1)
gem install bundler
gem install rails
rbenv rehash

# install travis for encryption
gem install travis




echo "
================================================

Setup is done.
Restart your machine for changes to apply.

================================================
"


